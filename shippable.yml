# Language setting http://docs.shippable.com/ci/languages/node/
language: node_js

# use this to control what branches get built.
# http://docs.shippable.com/ci/advancedOptions/branches/
branches:
  only:
    - master

# using pre-defined build variables
# full list http://docs.shippable.com/ci/advancedOptions/environmentVariables/
env:
  global:
    - TEST_RESULTS_DIR=$SHIPPABLE_REPO_DIR/shippable/testresults
    - CODE_COVERAGE_DIR=$SHIPPABLE_REPO_DIR/shippable/codecoverage
    - TESTS_LOC_DIR=$SHIPPABLE_REPO_DIR/tests
    - MOD_LOC=$SHIPPABLE_REPO_DIR/node_modules/.bin/
    - TARGETPATH="devops-recipes-nodecluster-packages"

build:

  # http://docs.shippable.com/ci/shippableyml/#ci
  ci:
    # npm mirrors can sometimes be flacky, better to use shippable_retry
    # http://docs.shippable.com/ci/advancedOptions/retry/
    - shippable_retry npm install
    - mkdir -p $TEST_RESULTS_DIR && mkdir -p $CODE_COVERAGE_DIR
    - pushd $TESTS_LOC_DIR
    - $MOD_LOC/mocha --recursive "$TESTS_LOC_DIR/**/*.spec.js" -R mocha-junit-reporter --reporter-options mochaFile=$TEST_RESULTS_DIR/testresults.xml
    - $MOD_LOC/istanbul --include-all-sources cover -root "$SHIPPABLE_REPO_DIR/routes" $SHIPPABLE_REPO_DIR/node_modules/mocha/bin/_mocha -- -R spec-xunit-file --recursive "$TESTS_LOC_DIR/**/*.spec.js"
    - $MOD_LOC/istanbul report cobertura --dir $CODE_COVERAGE_DIR
    - popd

  # http://docs.shippable.com/ci/shippableyml/#post_ci
  push:
    - echo "$SHIPPABLE_BUILD_DIR"
    - echo "$SHIPPABLE_REPO_DIR"
    - if [ $IS_PULL_REQUEST == "false" ] ; then BUCKETKEY="$DEPLOYNODECLUSTERBASICAPPFILE_NAME.tar.gz"; fi;
    - if [ $IS_PULL_REQUEST == "false" ] ; then pushd $SHIPPABLE_REPO_DIR && tar cfz /tmp/$BUCKETKEY . && popd; fi;
    - if [ $IS_PULL_REQUEST == "false" ] ; then pushd /tmp && jfrog rt u $BUCKETKEY "$TARGETPATH/$BUCKETKEY" && popd; fi;
    - if [ $IS_PULL_REQUEST == "false" ] ; then echo "versionName=$COMMIT" > $JOB_STATE/deploy-nodecluster-jfrog-appfile.env; fi;

# Integrations are used to connect external resources to CI
# http://docs.shippable.com/integrations/overview/
integrations:
  # adding jfrog integration so that credentials are available to CI Job
  hub:
    - integrationName: dr-artifactory
      type: artifactory

resources:
  - name: deploy-nodecluster-jfrog-cluster
    type: cluster
    flags:
      - deploy-nodecluster-jfrog
    integration: dr-nc

  - name: deploy-nodecluster-jfrog-appfile
    type: file
    flags:
      - deploy-nodecluster-jfrog
    integration: dr-artifactory
    pointer:
      sourceName: devops-recipes-nodecluster-packages/deploy-nodecluster-jfrog-appfile.tar.gz # points directly to publicly available file
    seed:
      versionName: test # dummy starting point

  - name: nodecluster-jfrog-params
    type: params
    flags:
      - deploy-nodecluster-jfrog
    version:
      params:
        manifestName: deploy-nodecluster-jfrog-manifest
        fileName: deploy-nodecluster-jfrog-appfile
        PORT: 8888
        ENVIRONMENT: nodeCluster

jobs:
  # - name: deploy-nodecluster-basic_runCI
  #   type: runCI
  #   flags:
  #     - deploy-nodecluster-jfrog
  #   steps:
  #     - OUT: deploy-nodecluster-jfrog-appfile

  - name: deploy-nodecluster-jfrog-manifest
    type: manifest
    flags:
      - deploy-nodecluster-jfrog
    steps:
      - IN: nodecluster-jfrog-params
      - IN: deploy-nodecluster-basic-appfile

  - name: deploy-nodecluster-jfrog-deploy
    type: deploy
    flags:
      - deploy-nodecluster-jfrog
    steps:
      - IN: deploy-nodecluster-jfrog-manifest
      - IN: deploy-nodecluster-jfrog-cluster

      - TASK:
        - script: cd ~
        - script: tar zxf /tmp/shippable/$manifestName/$fileName/$fileName.tar.gz
        - script: forever stopall
        - script: forever start ./bin/www
